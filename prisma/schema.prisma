generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  VENDOR
  ADMIN
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
}

enum WalletTransactionType {
  DEPOSIT
  WITHDRAWAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
  REJECTED
}

model User {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  username                 String                     @unique
  email                    String                     @unique
  password                 String
  mobile                   String?
  role                     Role                       @default(STUDENT)
  shopName                 String?
  balance                  Int                        @default(0)
  enabled                  Boolean                    @default(true)
  Product                  Product[]
  transactionsSend         Transaction[]              @relation("sender")
  transactionsReceived     Transaction[]              @relation("receiver")
  walletTransactionHistory WalletTransactionHistory[]
  paymentRequested         PaymentRequest[]           @relation("requester")
  paymentRequests          PaymentRequest[]           @relation("requestee")

  @@index([shopName])
}

model Product {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Int      @default(0)
  categoryName String?
  vendor       User     @relation(fields: [vendorId], references: [id])
  vendorId     String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([name, vendorId])
}

model Transaction {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  sender           User     @relation("sender", fields: [senderUsername], references: [username])
  senderUsername   String
  receiver         User     @relation("receiver", fields: [receiverUsername], references: [username])
  receiverUsername String
  amount           Int
  createdAt        DateTime @default(now())
}

model WalletTransactionHistory {
  id        String                @id @default(auto()) @map("_id") @db.ObjectId
  user      User                  @relation(fields: [userId], references: [id])
  userId    String                @db.ObjectId
  amount    Int
  type      WalletTransactionType @default(DEPOSIT)
  createdAt DateTime              @default(now())
}

model PaymentRequest {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  requester         User          @relation("requester", fields: [requesterUsername], references: [username])
  requesterUsername String
  requestee         User          @relation("requestee", fields: [requesteeUsername], references: [username])
  requesteeUsername String
  amount            Int
  createdAt         DateTime      @default(now())
  status            PaymentStatus @default(PENDING)
}
